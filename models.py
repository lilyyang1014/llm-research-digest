from sqlalchemy import Column, Integer, String, Text, Date, Table, ForeignKey
from sqlalchemy.orm import relationship
from database import Base  # Import Base from the database.py we just created

# --- Association Table ---
# This is a special table that doesn't correspond directly to a model class.
# Its purpose is to connect the Paper and Institution models, establishing a
# many-to-many relationship between them. This is because one paper can be
# authored by multiple institutions, and one institution can publish many papers.
paper_institution_association = Table(
    'paper_institution_association', Base.metadata,
    Column('paper_id', Integer, ForeignKey('papers.id'), primary_key=True),
    Column('institution_id', Integer, ForeignKey('institutions.id'), primary_key=True)
)

class Paper(Base):
    """
    Represents the 'papers' table in the database.
    This class defines the schema for storing paper-related information.
    """
    __tablename__ = 'papers'

    id = Column(Integer, primary_key=True, index=True)
    arxiv_id = Column(String, unique=True, index=True, nullable=False)
    title = Column(Text, nullable=False)
    abstract = Column(Text)
    publish_date = Column(Date)
    
    # This field will store the one-sentence summary generated by the LLM.
    llm_summary = Column(Text)
    
    # --- Relationship Definition ---
    # The `relationship` call defines the link between the Paper and Institution models.
    # - "Institution": Points to the name of the class to be linked.
    # - secondary=paper_institution_association: Tells SQLAlchemy to use our association table to manage this many-to-many relationship.
    # - back_populates="papers": Creates a bidirectional link. In the Institution model, there will be a 'papers' attribute to query related papers.
    institutions = relationship(
        "Institution",
        secondary=paper_institution_association,
        back_populates="papers"
    )

class Institution(Base):
    """
    Represents the 'institutions' table in the database.
    This class defines the schema for storing institution names.
    """
    __tablename__ = 'institutions'

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True, nullable=False)
    
    # --- Relationship Definition ---
    # This is the other half of the relationship defined in the Paper model.
    papers = relationship(
        "Paper",
        secondary=paper_institution_association,
        back_populates="institutions"
    )